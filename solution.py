a = {'l0': [[(-100.0, 255.0), (-50.0, 67.5), (0.0, 5.0), (50.0, 67.5), (100.0, 255.0)], [(-100.0, -240.0), (-50.0, -52.5), (0.0, 10.0), (50.0, -52.5), (100.0, -240.0)], [(-100.0, 100000000.0), (-50.0, 25000000.0), (0.0, 0.0), (50.0, 25000000.0), (100.0, 100000000.0)]], 'l1': [[(-100.0, 20250.0), (-50.0, 6250.0), (0.0, 250.0), (50.0, 2250.0), (100.0, 12250.0)], [(-100.0, 22090.0), (-50.0, 7290.0), (0.0, 490.0), (50.0, 1690.0), (100.0, 10890.0)]], 'l2': [[(-100.0, 144000000.0), (-50.0, 49000000.0), (0.0, 4000000.0), (50.0, 9000000.0), (100.0, 64000000.0)], [(-100.0, 169000000.0), (-50.0, 64000000.0), (0.0, 9000000.0), (50.0, 4000000.0), (100.0, 49000000.0)], [(-100.0, -1430.0), (-50.0, -480.0), (0.0, -30.0), (50.0, -80.0), (100.0, -630.0)]], 'l3': [[(-100.0, -643.3268), (-50.0, -259.9973), (0.0, -43.332800000000006), (50.0, 6.6667), (100.0, -109.9988)], [(-100.0, 31989.875), (-50.0, 7988.625), (0.0, 562.375), (50.0, -38.875), (100.0, -3565.125)], [(-100.0, 563.3277), (-50.0, 213.33120000000002), (0.0, 29.9997), (50.0, 13.333200000000001), (100.0, 163.3317)]], 'l4': [[(-100.0, 11.96), (-50.0, 10.81), (0.0, 10.16), (50.0, 10.01), (100.0, 10.36)], [(-100.0, 6.96), (-50.0, 5.8100000000000005), (0.0, 5.16), (50.0, 5.01), (100.0, 5.36)], [(-100.0, 1.9600000000000002), (-50.0, 0.81), (0.0, 0.16), (50.0, 0.01), (100.0, 0.36000000000000004)], [(-100.0, 196000000.0), (-50.0, 81000000.0), (0.0, 16000000.0), (50.0, 1000000.0), (100.0, 36000000.0)]], 'l5': [[(-100.0, -1270.0), (-50.0, -595.0), (0.0, -170.0), (50.0, 5.0), (100.0, -70.0)], [(-100.0, 1280.0), (-50.0, 605.0), (0.0, 180.0), (50.0, 5.0), (100.0, 80.0)]], 'l6': [[(-100.0, -160.0), (-50.0, -110.0), (0.0, -60.0), (50.0, -10.0), (100.0, 40.0)]], 'l7': [[(-100.0, -12240.0), (-50.0, -6240.0), (0.0, -2240.0), (50.0, -240.0), (100.0, -240.0)], [(-100.0, 35.625), (-50.0, 20.625), (0.0, 10.625), (50.0, 5.625), (100.0, 5.625)]], 'l8': [[(-100.0, 324000000.0), (-50.0, 169000000.0), (0.0, 64000000.0), (50.0, 9000000.0), (100.0, 4000000.0)], [(-100.0, 815.0), (-50.0, 427.5), (0.0, 165.0), (50.0, 27.5), (100.0, 15.0)], [(-100.0, -800.0), (-50.0, -412.5), (0.0, -150.0), (50.0, -12.5), (100.0, 0.0)], [(-100.0, -1615.0), (-50.0, -840.0), (0.0, -315.0), (50.0, -40.0), (100.0, -15.0)]], 'l9': [[(-100.0, 380250000.0), (-50.0, 210250000.0), (0.0, 90250000.0), (50.0, 20250000.0), (100.0, 250000.0)], [(-100.0, 10.38025), (-50.0, 10.21025), (0.0, 10.09025), (50.0, 10.02025), (100.0, 10.00025)]], 'l10': [[(-100.0, 4.202500000000001), (-50.0, 2.4025000000000003), (0.0, 1.1025), (50.0, 0.3025), (100.0, 0.0025)]], 'l11': [[(-100.0, 14.41), (-50.0, 12.56), (0.0, 11.21), (50.0, 10.36), (100.0, 10.01)], [(-100.0, 9.41), (-50.0, 7.5600000000000005), (0.0, 6.21), (50.0, 5.36), (100.0, 5.01)], [(-100.0, 441000000.0), (-50.0, 256000000.0), (0.0, 121000000.0), (50.0, 36000000.0), (100.0, 1000000.0)]], 'l12': [[(-100.0, -10115.0), (-50.0, -6115.0), (0.0, -3115.0), (50.0, -1115.0), (100.0, -115.0)], [(-100.0, 10125.0), (-50.0, 6125.0), (0.0, 3125.0), (50.0, 1125.0), (100.0, 125.0)]], 'l13': [[(-100.0, 529000000.0), (-50.0, 324000000.0), (0.0, 169000000.0), (50.0, 64000000.0), (100.0, 9000000.0)], [(-100.0, 1327.5), (-50.0, 815.0), (0.0, 427.5), (50.0, 165.0), (100.0, 27.5)], [(-100.0, -1312.5), (-50.0, -800.0), (0.0, -412.5), (50.0, -150.0), (100.0, -12.5)], [(-100.0, -2640.0), (-50.0, -1615.0), (0.0, -840.0), (50.0, -315.0), (100.0, -40.0)]], 'l14': [[(-100.0, 6.0025), (-50.0, 3.8025), (0.0, 2.1025), (50.0, 0.9025000000000001), (100.0, 0.2025)]], 'l15': [[(-100.0, 625000000.0), (-50.0, 400000000.0), (0.0, 225000000.0), (50.0, 100000000.0), (100.0, 25000000.0)], [(-100.0, 676000000.0), (-50.0, 441000000.0), (0.0, 256000000.0), (50.0, 121000000.0), (100.0, 36000000.0)], [(-100.0, -6240.0), (-50.0, -3990.0), (0.0, -2240.0), (50.0, -990.0), (100.0, -240.0)]], 'l16': [[(-100.0, 16.76), (-50.0, 14.41), (0.0, 12.56), (50.0, 11.21), (100.0, 10.36)], [(-100.0, 11.760000000000002), (-50.0, 9.41), (0.0, 7.5600000000000005), (50.0, 6.21), (100.0, 5.36)], [(-100.0, 6.760000000000001), (-50.0, 4.41), (0.0, 2.56), (50.0, 1.21), (100.0, 0.36000000000000004)], [(-100.0, 676000000.0), (-50.0, 441000000.0), (0.0, 256000000.0), (50.0, 121000000.0), (100.0, 36000000.0)]], 'l17': [[(-100.0, 729000000.0), (-50.0, 484000000.0), (0.0, 289000000.0), (50.0, 144000000.0), (100.0, 49000000.0)], [(-100.0, 1827.5), (-50.0, 1215.0), (0.0, 727.5), (50.0, 365.0), (100.0, 127.5)], [(-100.0, -1812.5), (-50.0, -1200.0), (0.0, -712.5), (50.0, -350.0), (100.0, -112.5)], [(-100.0, -3640.0), (-50.0, -2415.0), (0.0, -1440.0), (50.0, -715.0), (100.0, -240.0)]], 'l18': [[(-100.0, 784000000.0), (-50.0, 529000000.0), (0.0, 324000000.0), (50.0, 169000000.0), (100.0, 64000000.0)], [(-100.0, -3910.0), (-50.0, -2635.0), (0.0, -1610.0), (50.0, -835.0), (100.0, -310.0)], [(-100.0, 3920.0), (-50.0, 2645.0), (0.0, 1620.0), (50.0, 845.0), (100.0, 320.0)]], 'l19': [[(-100.0, -2989.9700000000003), (-50.0, -2073.3125), (0.0, -1323.3200000000002), (50.0, -739.9925000000001), (100.0, -323.33000000000004)], [(-100.0, 333745.875), (-50.0, 191184.625), (0.0, 96398.375), (50.0, 39637.125), (100.0, 11150.875)], [(-100.0, 2803.3053), (-50.0, 1919.9808), (0.0, 1203.3213), (50.0, 653.3268), (100.0, 269.9973)]], 'l20': [[(-100.0, -300.0), (-50.0, -250.0), (0.0, -200.0), (50.0, -150.0), (100.0, -100.0)]]}

import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict

samples = a

# Reverse shifts and fit polynomials
def reverse_shift_and_fit(samples):
    reconstructed_functions = {}
    
    for key, datasets in samples.items():
        letter_index = int(key[1:])  # Extract the index from the key (e.g., 'l0' -> 0)
        reconstructed_functions[key] = []
        
        for pointset in datasets:

            x_shifted, y = zip(*pointset)
            x_original = [x + 10 * letter_index for x in x_shifted]
            
            # Fit a polynomial to the data
            degree = min(len(x_original) - 1, 4)  # Fit up to a 4th degree polynomial
            coeffs = np.polyfit(x_original, y, degree)
            poly = np.poly1d(coeffs)
            
            # Store the reconstructed function
            reconstructed_functions[key].append({
                'x_original': x_original,
                'y': y,
                'polynomial': poly,
                'coefficients': coeffs
            })
            
    return reconstructed_functions

def polynomial_to_equation(coeffs):
    terms = []
    degree = len(coeffs) - 1
    for i, coef in enumerate(coeffs):
        power = degree - i
        if coef != 0:
            if power == 0:
                terms.append(f"{coef:.3f}")
            elif power == 1:
                terms.append(f"{coef:.3f}x")
            else:
                terms.append(f"{coef:.3f}x^{power}")
    return " + ".join(terms).replace("+ -", "- ")





reconstructed = reverse_shift_and_fit(samples)

lc = 0
for key, functions in reconstructed.items():
    # print(f"\nKey: {key}")
    for i, func in enumerate(functions):
        equation = polynomial_to_equation(func['coefficients'])
        print(f"y = {equation} "+"\\left\\{" + str(20 * lc) + " <= x <= " + str(20*lc + 10 ) + "\\right\\}" )
    lc = lc + 1
